#
# Freescale Kinetis K20 devices
#
# This microcontroller is used on the mchck board, and teensy 3.x.
#

source [find target/swj-dp.tcl]

if { [info exists CHIPNAME] } {
        set _CHIPNAME $CHIPNAME
} else {
        set _CHIPNAME k20
}

# Work-area is a space in RAM used for flash programming
# 0x8000 32K
# 0x6000 24K
# 0x4000 16K
# These will fit all K20
# 0x2000 8K
# 0x1000 4K

if { [info exists WORKAREASIZE] } {
        set _WORKAREASIZE $WORKAREASIZE
} else {
        set _WORKAREASIZE 0x1000
}

if { [info exists ENDIAN] } {
    set _ENDIAN $ENDIAN
} else {
    set _ENDIAN little
}

if { [info exists CPUTAPID] } {
        set _CPUTAPID $CPUTAPID
} else {
        # SW-DP tap id 0x2ba01477
        #  jtag tap id 0x4ba00477
        set _CPUTAPID 0x4ba00477
}

set _TARGETNAME $_CHIPNAME.cpu

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
target create $_TARGETNAME cortex_m -chain-position $_TARGETNAME

# SRAM for work area
$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

#
# Too bad there is no event when examine fails,
# because we could kick it in the pants here
#
#$_TARGETNAME configure -event examine-fail {
#       jtag_reset 1 1
#       sleep 500
#       reset init
#       sleep 500
#}

$_TARGETNAME configure -event examine-start {
        jtag_reset 1 1
        sleep 500
        jtag_reset 0 0
        sleep 500
        puts "**** examine-start"
}

$_TARGETNAME configure -event examine-end {

        puts "**** examine-end"
}

$_TARGETNAME configure -event gdb-attach {
        puts "**** gdb-attach"
        puts [ $_TARGETNAME curstate ]
        if { [ $_TARGETNAME curstate ] == "unknown" } {
                jtag_reset 1 1
                sleep 500
                reset init
                sleep 500
        }

        if { [ $_TARGETNAME curstate ] == "running" } {
                halt
        }

        if { [ $_TARGETNAME curstate ] == "reset" } {
                reset halt
        }
}

$_TARGETNAME configure -event gdb-detach {
        puts "**** gdb-detach"
}

$_TARGETNAME configure -event gdb-flash-erase-start {
        puts "**** gdb-flash-erase-start"
        reset init
        wait_halt
}

$_TARGETNAME configure -event gdb-flash-erase-end {
        puts "**** gdb-flash-erase-end"
}

$_TARGETNAME configure -event gdb-flash-write-start {
        puts "**** gdb-flash-write-start"
}

$_TARGETNAME configure -event gdb-flash-write-end {
        puts "**** gdb-flash-write-end"
        reset halt
        wait_halt
}

#
# How many total?! Why can't we init after?!
#
#
# flash bank name             driver   base       size     chip_width bus_width target
flash   bank $_CHIPNAME.pflash-bank0 kinetis 0x00000000 0x00000  0          4         $_TARGETNAME

#flash   bank $_CHIPNAME.pflash-bank1 kinetis 0x00000000 0x00000  0          4         $_TARGETNAME
#flash   bank $_CHIPNAME.pflash-bank2 kinetis 0x00000000 0x00000  0          4         $_TARGETNAME
#flash   bank $_CHIPNAME.pflash-bank3 kinetis 0x00000000 0x00000  0          4         $_TARGETNAME

# if srst is not fitted use SYSRESETREQ to
# perform a soft reset
# cortex_m reset_config sysresetreq
